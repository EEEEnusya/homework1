#include <iostream>
#include <fstream>
#include <string>
#include <vector>
    std::string coding(std::string message) {
    std::string cod;
        const char *data = message.data();
        int size = message.size();

        std::vector<char> bytes(size);
        for (int i = 0; i < size; i++) {
            bytes[i] = data[i];
        }
        int key = 4;
        int leftShift = 3;
        srand(key);

        for (size_t i = 0; i < bytes.size(); i += 2) {
            int gamma = rand();
            char b1 = bytes[i];
            char b2 = i + 1 < bytes.size() ? bytes[i + 1] : 0u;

            int message_xored_with_gamma =
                    ((static_cast<int>(b1) << 8u) | static_cast<int>(b2)) ^ gamma;
            int encrypted_block =
                    (message_xored_with_gamma << leftShift) | (message_xored_with_gamma & 0xFFFF) >> (16 - leftShift);

            char r1 = encrypted_block >> 8;
            char r2 = encrypted_block;
            cod.push_back(r1);
            cod.push_back(r2);
        }
        return cod;
    }


std::vector<char> decoding(std::string message) {
    int key;
    int leftShift = 3;
    srand(key);
    std::vector<char> decryptedData(message.size());

    for (int i = 0; i < message.size(); i += 2) {
        int gamma = rand();
        char b1 = message[i];
        char b2 = i + 1 < message.size() ? message[i + 1] : 0u;

        int encrypted_block =
                ((static_cast<unsigned int>(b1) << 8u) | static_cast<unsigned int>(b2));

        int shifted_encrypted_block =
                ((encrypted_block & 0xFFFF) >> leftShift) | encrypted_block << (16 - leftShift);

        int result =
                shifted_encrypted_block ^ gamma;

        char r1 = result >> 8;
        char r2 = result;
        decryptedData[i] = r1;
        decryptedData[i + 1] = r2;
    }
    return decryptedData;

}
int main(){
    std::cout<<"расшифровка(1) или шифровка(2)" << std::endl;
    int n;
    std::cin>>n;
    std::cout<< "Введите сообщение" << std::endl;
    std::string message;
    std::cin >> message;
    std::string cod;
    std::vector< char> cod1;
    if (n==1){
        cod1=decoding(message);
        for (unsigned int i = 0; i < cod1.size(); i++) {
            std::cout << cod1[i];
        }
    }
    if (n==2){
        cod=coding(message);
        for (size_t i=0; i< cod.size(); i++){
            std::cout<< cod[i];
        }
    }

}
